---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import { getLanguage, loadTranslations } from '../utils/language.js';

// Detect user language
const userLang = await getLanguage(Astro.request);
const t = await loadTranslations(userLang);

// Background slideshow images
const screenshots = [
  "/images/screenshots/world1.jpg",
  "/images/screenshots/base2.jpg",
  "/images/screenshots/spawn3.jpg",
];

// Social media links
const socialLinks = [
  {
    name: t.contact.social.discord.name,
    url: "https://discord.gg/valeqs",
    icon: `<path d="M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z"`,
    color: "#5865F2",
    label: t.contact.social.discord.label,
    highlight: true
  },
  {
    name: t.contact.social.email.name,
    url: "mailto:contact@valeqs.com",
    icon: `<path d="M48,64 C21.5,64 0,85.5 0,112c0,15.1 7.1,29.3 19.2,38.4L236.8,313.6c11.4,8.5 27,8.5 38.4,0L492.8,150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48H48zM0,176V384c0,35.3 28.7,64 64,64H448c35.3,0 64-28.7 64-64V176L294.4,339.2c-22.8,17.1-54,17.1-76.8,0L0,176z"`,
    color: "#ffffff",
    label: t.contact.social.email.label
  },
  {
    name: t.contact.social.twitter.name,
    url: "https://twitter.com/valeqsmc",
    icon: `<path d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"`,
    color: "#1DA1F2",
    label: t.contact.social.twitter.label
  }
];

// Use FAQ items from translations
const faqItems = t.contact.faq.items;
---

<Layout title={t.contact.title}>
  <!-- Background Slideshow -->
  <div class="background-slideshow">
    {screenshots.map((img, index) => (
      <div class="slide" data-index={index} style={`background-image: url(${img})`}></div>
    ))}
    <div class="overlay"></div>
  </div>
  
  <div class="page-container">
    <!-- Navigation -->
    <Navbar activePage="contact" />
    
    <!-- Hero Section -->
    <section class="hero-section">
      <div class="hero-content">
        <h1 class="hero-title" set:html={t.contact.heroTitle}></h1>
        <p class="hero-subtitle">{t.contact.heroSubtitle}</p>
      </div>
    </section>
    
    <!-- Content Grid -->
    <div class="content-grid">
      <!-- Left Column: Contact Form -->
      <section class="contact-form-section">
        <div class="glass-card">
          <h2>{t.contact.form.title}</h2>
          
          <form id="contact-form" class="contact-form">
            <div class="form-group">
              <label for="name">{t.contact.form.name}</label>
              <input type="text" id="name" name="name" placeholder={t.contact.form.namePlaceholder} required>
            </div>
            
            <div class="form-group">
              <label for="email">{t.contact.form.email}</label>
              <input type="email" id="email" name="email" placeholder={t.contact.form.emailPlaceholder} required>
            </div>
            
            <div class="form-group">
              <label for="subject">{t.contact.form.subject}</label>
              <select id="subject" name="subject" required>
                <option value="" disabled selected>{t.contact.form.subjectSelect}</option>
                <option value="general">{t.contact.form.subjects.general}</option>
                <option value="support">{t.contact.form.subjects.support}</option>
                <option value="feedback">{t.contact.form.subjects.feedback}</option>
                <option value="report">{t.contact.form.subjects.report}</option>
                <option value="bug">{t.contact.form.subjects.bug}</option>
                <option value="business">{t.contact.form.subjects.business}</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="message">{t.contact.form.message}</label>
              <textarea id="message" name="message" rows="6" placeholder={t.contact.form.messagePlaceholder} required></textarea>
            </div>
            
            <div class="form-group captcha-group">
              <div class="captcha-placeholder">
                <div class="captcha-box">{t.contact.form.captcha}</div>
              </div>
            </div>
            
            <button type="submit" class="submit-button">
              <span class="btn-text">{t.contact.form.send}</span>
              <span class="btn-icon">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18">
                  <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" fill="currentColor"/>
                </svg>
              </span>
            </button>
          </form>
        </div>
      </section>
      
      <!-- Right Column: Social and Discord -->
      <section class="social-section">
        <!-- Discord Embed -->
        <div class="discord-card">
          <div class="discord-header">
            <svg class="discord-logo" viewBox="0 0 127.14 96.36" width="40" height="30">
              <path d="M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z" fill="#5865F2"/>
            </svg>
            <h2>{t.contact.discord.title}</h2>
          </div>
          
          <div class="discord-content">
            <p>{t.contact.discord.description}</p>
            
            <div class="discord-stats">
              <div class="stat">
                <div class="stat-value">5,000+</div>
                <div class="stat-label">{t.contact.discord.members}</div>
              </div>
              <div class="stat">
                <div class="stat-value">500+</div>
                <div class="stat-label">{t.contact.discord.online}</div>
              </div>
            </div>
            
            <a href="https://discord.gg/valeqs" target="_blank" rel="noopener" class="discord-join-button">
              {t.contact.discord.joinButton}
            </a>
          </div>
        </div>
        
        <!-- Social Links -->
        <div class="social-links">
          {socialLinks.map(link => (
            <a href={link.url} class={`social-link ${link.highlight ? 'highlight' : ''}`} style={`--social-color: ${link.color}`} target="_blank" rel="noopener noreferrer">
              <div class="social-icon">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="24" height="24">
                  {link.icon}
                </svg>
              </div>
              <div class="social-details">
                <span class="social-name">{link.name}</span>
                <span class="social-label">{link.label}</span>
              </div>
            </a>
          ))}
        </div>
        
        <!-- Quick FAQ -->
        <div class="quick-faq">
          <h3>{t.contact.faq.title}</h3>
          
          <div class="faq-list">
            {faqItems.map((item, index) => (
              <div class="faq-item">
                <div class="faq-question" data-faq={index}>
                  <span class="question-text">{item.question}</span>
                  <span class="question-icon">
                    <svg class="icon-plus" viewBox="0 0 24 24" width="20" height="20">
                      <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" fill="currentColor"/>
                    </svg>
                    <svg class="icon-minus" viewBox="0 0 24 24" width="20" height="20">
                      <path d="M19 13H5v-2h14v2z" fill="currentColor"/>
                    </svg>
                  </span>
                </div>
                <div class="faq-answer">
                  <p>{item.answer}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>
    </div>
    
    <!-- Footer -->
    <footer class="site-footer">
      <div class="footer-content">
        <div class="footer-info">
          <span>{t.footer.copyright}</span>
          <span>{t.footer.disclaimer}</span>
        </div>
        
        <div class="footer-links">
          <a href="/terms">{t.footer.terms}</a>
          <a href="/privacy">{t.footer.privacy}</a>
          <a href="/rules">{t.footer.rules}</a>
        </div>
      </div>
    </footer>
  </div>
</Layout>

<script>
  // Background Slideshow Functionality
  document.addEventListener('DOMContentLoaded', () => {
    const slides = document.querySelectorAll('.slide');
    let currentSlide = 0;
    
    // Initialize: hide all slides except the first one
    slides.forEach((slide, index) => {
      if (index !== 0) {
        slide.classList.add('inactive');
      }
    });
    
    function rotateSlides() {
      // Fade out current slide
      slides[currentSlide].classList.add('fade-out');
      
      setTimeout(() => {
        // Hide current slide
        slides[currentSlide].classList.add('inactive');
        slides[currentSlide].classList.remove('fade-out');
        
        // Move to next slide
        currentSlide = (currentSlide + 1) % slides.length;
        
        // Show and fade in next slide
        slides[currentSlide].classList.remove('inactive');
        slides[currentSlide].classList.add('fade-in');
        
        setTimeout(() => {
          slides[currentSlide].classList.remove('fade-in');
        }, 1000);
      }, 1000);
    }
    
    // Rotate slides every 8 seconds
    setInterval(rotateSlides, 8000);
    
    // FAQ accordion functionality
    const faqQuestions = document.querySelectorAll('.faq-question');
    
    faqQuestions.forEach(question => {
      question.addEventListener('click', () => {
        const faqItem = question.parentElement;
        const answer = question.nextElementSibling;
        
        if (!faqItem || !answer) return;
        
        const isActive = faqItem.classList.contains('active');
        
        // Close all FAQs
        document.querySelectorAll('.faq-item').forEach(item => {
          item.classList.remove('active');
          const answerEl = item.querySelector('.faq-answer');
          if (answerEl instanceof HTMLElement) {
            answerEl.style.maxHeight = '';
          }
        });
        
        // If the clicked item wasn't active, open it
        if (!isActive) {
          faqItem.classList.add('active');
          if (answer instanceof HTMLElement) {
            answer.style.maxHeight = answer.scrollHeight + 'px';
          }
        }
      });
    });
    
    // Contact form submission handling
    const contactForm = document.getElementById('contact-form');
    contactForm?.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // Get form data
      const formData = new FormData(contactForm as HTMLFormElement);
      const data = Object.fromEntries(formData.entries());
      
      // Simple validation
      if (!data.name || !data.email || !data.subject || !data.message) {
        alert('Please fill in all required fields');
        return;
      }
      
      // In a real application, you would send this data to your backend
      console.log('Form submitted:', data);
      
      // Show success message
      const submitButton = contactForm.querySelector('.submit-button');
      if (submitButton) {
        const originalText = submitButton.innerHTML;
        submitButton.innerHTML = `
          <span class="btn-text">Message Sent!</span>
          <span class="btn-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18">
              <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" fill="currentColor"/>
            </svg>
          </span>
        `;
        if (submitButton instanceof HTMLButtonElement) {
          submitButton.disabled = true;
        }
        submitButton.classList.add('success');
        
        // Reset form after delay
        setTimeout(() => {
          (contactForm as HTMLFormElement).reset();
          submitButton.innerHTML = originalText;
          if (submitButton instanceof HTMLButtonElement) {
            submitButton.disabled = false;
          }
          submitButton.classList.remove('success');
        }, 3000);
      }
    });
  });
</script>

<style>
  /* Variables */
  :root {
    /* Discord-inspired colors */
    --bg-primary: #36393f;
    --bg-secondary: #2f3136;
    --bg-tertiary: #202225;
    
    --text-normal: #dcddde;
    --text-muted: #8e9297;
    --text-heading: #ffffff;
    
    --interactive: #b9bbbe;
    --interactive-hover: #dcddde;
    --interactive-active: #ffffff;
    
    --discord-color: #5865f2;
    --discord-hover: #4752c4;
    
    --accent-white: #ffffff;
    --accent-white-glow: rgba(255, 255, 255, 0.3);
    
    --error-color: #ed4245;
    --success-color: #3ba55c;
    
    /* Animation speeds */
    --transition-fast: 0.2s;
    --transition-medium: 0.3s;
    --transition-slow: 0.5s;
  }
  
  /* Background Slideshow */
  .background-slideshow {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
  }
  
  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    transition: opacity 1s ease;
  }
  
  .slide.inactive {
    opacity: 0;
    pointer-events: none;
  }
  
  .slide.fade-in {
    animation: fadeIn 1.5s forwards;
  }
  
  .slide.fade-out {
    animation: fadeOut 1.5s forwards;
  }
  
  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at center, rgba(32, 34, 37, 0.85) 0%, rgba(15, 17, 19, 0.95) 100%);
    z-index: -1;
  }
  
  /* Page Container */
  .page-container {
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 1.5rem;
    position: relative;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }
  
  /* Hero Section */
  .hero-section {
    padding: 6rem 0 3rem;
    text-align: center;
  }
  
  .hero-title {
    font-size: 3.5rem;
    font-weight: 800;
    margin-bottom: 1.5rem;
    color: var(--text-heading);
    letter-spacing: -0.02em;
    line-height: 1.1;
    transform: translateY(20px);
    opacity: 0;
    animation: fadeSlideUp 0.6s 0.2s forwards;
  }
  
  .hero-title .highlight {
    color: var(--accent-white);
    text-shadow: 0 0 10px var(--accent-white-glow);
  }
  
  .hero-subtitle {
    font-size: 1.2rem;
    color: var(--text-muted);
    max-width: 600px;
    margin: 0 auto;
    transform: translateY(20px);
    opacity: 0;
    animation: fadeSlideUp 0.6s 0.4s forwards;
  }
  
  /* Content Grid */
  .content-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2.5rem;
    margin-bottom: 4rem;
  }
  
  /* Glass Card Effect */
  .glass-card {
    background: rgba(47, 49, 54, 0.7);
    border-radius: 16px;
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.05);
    padding: 2rem;
    height: 100%;
    transition: all var(--transition-medium);
  }
  
  .glass-card:hover {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
    border-color: rgba(255, 255, 255, 0.1);
  }
  
  /* Contact Form Section */
  .contact-form-section {
    opacity: 0;
    transform: translateY(30px);
    animation: fadeSlideUp 0.6s 0.6s forwards;
  }
  
  .contact-form-section h2 {
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--text-heading);
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .form-group label {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--text-normal);
  }
  
  .form-group input,
  .form-group select,
  .form-group textarea {
    background-color: var(--bg-tertiary);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    padding: 0.75rem 1rem;
    color: var(--text-normal);
    font-family: inherit;
    font-size: 1rem;
    transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
  }
  
  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    border-color: rgba(255, 255, 255, 0.3);
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);
    outline: none;
  }
  
  .form-group textarea {
    resize: vertical;
    min-height: 120px;
  }
  
  .captcha-group {
    margin-top: 0.5rem;
  }
  
  .captcha-placeholder {
    display: flex;
    justify-content: center;
  }
  
  .captcha-box {
    background-color: var(--bg-tertiary);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    padding: 0.75rem 1.5rem;
    color: var(--text-muted);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 0.9rem;
    cursor: pointer;
  }
  
  .submit-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 1rem 1.5rem;
    background-color: var(--accent-white);
    color: #000;
    font-weight: 700;
    font-size: 1rem;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    transition: all var(--transition-fast);
    gap: 0.5rem;
    margin-top: 0.5rem;
  }
  
  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px var(--accent-white-glow);
  }
  
  .submit-button:active {
    transform: translateY(0);
  }
  
  .submit-button.success {
    background-color: var(--success-color);
    color: white;
  }
  
  /* Social Section */
  .social-section {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    opacity: 0;
    transform: translateY(30px);
    animation: fadeSlideUp 0.6s 0.8s forwards;
  }
  
  /* Discord Card */
  .discord-card {
    background: rgba(88, 101, 242, 0.15);
    border: 1px solid rgba(88, 101, 242, 0.3);
    border-radius: 16px;
    overflow: hidden;
  }
  
  .discord-header {
    background-color: var(--discord-color);
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .discord-header h2 {
    color: white;
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0;
  }
  
  .discord-logo {
    flex-shrink: 0;
  }
  
  .discord-content {
    padding: 1.5rem;
  }
  
  .discord-content p {
    color: var(--text-normal);
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }
  
  .discord-stats {
    display: flex;
    gap: 2rem;
    margin-bottom: 1.5rem;
  }
  
  .discord-stats .stat {
    text-align: center;
  }
  
  .discord-stats .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-heading);
  }
  
  .discord-stats .stat-label {
    font-size: 0.9rem;
    color: var(--text-muted);
  }
  
  .discord-join-button {
    display: block;
    background-color: var(--discord-color);
    color: white;
    text-align: center;
    padding: 0.75rem;
    border-radius: 4px;
    font-weight: 600;
    text-decoration: none;
    transition: background-color var(--transition-fast), transform var(--transition-fast);
  }
  
  .discord-join-button:hover {
    background-color: var(--discord-hover);
    transform: translateY(-2px);
  }
  
  /* Social Links */
  .social-links {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .social-link {
    display: flex;
    align-items: center;
    gap: 1rem;
    text-decoration: none;
    background: rgba(47, 49, 54, 0.7);
    border-radius: 8px;
    padding: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.05);
    transition: all var(--transition-fast);
  }
  
  .social-link:hover {
    transform: translateY(-2px);
    background: rgba(47, 49, 54, 0.9);
    border-color: var(--social-color, rgba(255, 255, 255, 0.1));
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }
  
  .social-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--social-color, #ffffff);
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000;
    flex-shrink: 0;
  }
  
  .social-details {
    display: flex;
    flex-direction: column;
  }
  
  .social-name {
    font-weight: 600;
    color: var(--text-heading);
    font-size: 1.1rem;
  }
  
  .social-label {
    color: var(--text-muted);
    font-size: 0.9rem;
  }
  
  .social-link.highlight {
    background: linear-gradient(to right, rgba(88, 101, 242, 0.15), rgba(47, 49, 54, 0.7));
  }
  
  /* Quick FAQ */
  .quick-faq {
    margin-top: 1rem;
    background: rgba(47, 49, 54, 0.7);
    border-radius: 16px;
    padding: 1.5rem;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .quick-faq h3 {
    font-size: 1.3rem;
    color: var(--text-heading);
    margin-bottom: 1.5rem;
    font-weight: 600;
  }
  
  .faq-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .faq-item {
    background-color: var(--bg-tertiary);
    border-radius: 8px;
    overflow: hidden;
  }
  
  .faq-question {
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    transition: background var(--transition-fast);
  }
  
  .faq-question:hover {
    background: rgba(255, 255, 255, 0.05);
  }
  
  .question-text {
    font-weight: 600;
    font-size: 1rem;
    color: var(--text-heading);
  }
  
  .question-icon {
    flex-shrink: 0;
    height: 24px;
    width: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    color: var(--accent-white);
  }
  
  .icon-plus, .icon-minus {
    position: absolute;
    transition: opacity var(--transition-fast), transform var(--transition-fast);
  }
  
  .icon-minus {
    opacity: 0;
    transform: rotate(-90deg);
  }
  
  .faq-item.active .icon-plus {
    opacity: 0;
    transform: rotate(90deg);
  }
  
  .faq-item.active .icon-minus {
    opacity: 1;
    transform: rotate(0);
  }
  
  .faq-answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height var(--transition-medium);
    padding: 0 1rem;
  }
  
  .faq-answer p {
    color: var(--text-muted);
    line-height: 1.6;
    padding-bottom: 1rem;
    margin: 0;
  }
  
  /* Footer */
  .site-footer {
    margin-top: auto;
    padding: 2.5rem 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .footer-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .footer-info {
    display: flex;
    flex-direction: column;
    color: var(--text-muted);
    font-size: 0.9rem;
  }
  
  .footer-links {
    display: flex;
    gap: 1.5rem;
  }
  
  .footer-links a {
    color: var(--text-muted);
    text-decoration: none;
    font-size: 0.9rem;
    transition: color var(--transition-fast);
  }
  
  .footer-links a:hover {
    color: var(--text-normal);
  }
  
  /* Animations */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
  }
  
  @keyframes fadeSlideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Responsive Styles */
  @media (max-width: 1024px) {
    .hero-title {
      font-size: 3rem;
    }
  }
  
  @media (max-width: 768px) {
    .hero-section {
      padding: 5rem 0 3rem;
    }
    
    .hero-title {
      font-size: 2.5rem;
    }
    
    .content-grid {
      grid-template-columns: 1fr;
      gap: 2rem;
    }
    
    .social-section {
      order: -1;
    }
  }
  
  @media (max-width: 480px) {
    .hero-title {
      font-size: 2rem;
    }
    
    .glass-card,
    .discord-card,
    .quick-faq {
      padding: 1.25rem;
    }
    
    .discord-header {
      padding: 1.25rem;
    }
    
    .discord-header h2 {
      font-size: 1.3rem;
    }
    
    .discord-stats {
      gap: 1rem;
    }
    
    .social-link {
      padding: 0.75rem;
    }
    
    .social-icon {
      width: 36px;
      height: 36px;
    }
    
    .footer-content {
      flex-direction: column;
      gap: 1.5rem;
      align-items: flex-start;
    }
  }
</style>