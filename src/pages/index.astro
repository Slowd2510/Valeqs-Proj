---
import Layout from '../layouts/Layout.astro';
import { readdir, readFile } from 'fs/promises';
import path from 'path';
import { getLanguage, loadTranslations } from '../utils/language.js';
import type { Translations } from '../types/translations.js';


const userLang = await getLanguage(Astro.request);
const t = await loadTranslations(userLang) as Translations;

const serverInfo = {
  ip: "valeqs.de",
  // Status removed as requested indirectly
  uptime: ""
};


async function loadBlogPosts() {
  try {
    const blogsDir = path.join(process.cwd(), 'src', 'blogs');
    const files = await readdir(blogsDir);
    const jsonFiles = files.filter(file => file.endsWith('.json'));
    
    const posts = await Promise.all(jsonFiles.map(async (file) => {
      const filePath = path.join(blogsDir, file);
      const content = await readFile(filePath, 'utf8');
      const blogData = JSON.parse(content);
      
      const title = userLang === 'de' && blogData.title_de ? 
        blogData.title_de : blogData.title;
      const description = userLang === 'de' && blogData.description_de ? 
        blogData.description_de : blogData.description;
      
      const dateFormat = userLang === 'de' ? 'de-DE' : 'en-US';
      const dateOptions: Intl.DateTimeFormatOptions = {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      };
      
      let postDate;
      try {
        const dateObj = new Date(blogData.timestamp);
        postDate = dateObj.toLocaleDateString(dateFormat, dateOptions);
      } catch (e) {
        postDate = new Date().toLocaleDateString(dateFormat, dateOptions);
      }
      
      return {
        id: parseInt(file.split('-')[1].split('.')[0]),
        title: title || 'Untitled Post',
        date: postDate,
        dateIso: blogData.timestamp,
        content: description ? 
          description
            .replace(/\n/g, '<br>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>') :
          '',
        image: blogData.imageUrl || null,
        category: blogData.category || (userLang === 'de' ? 'Neuigkeit' : 'News'),
        preview: description ? 
          description.substring(0, 150) + (description.length > 150 ? '...' : '') : '',
        author: blogData.author || { username: 'Admin' }
      };
    }));

   
    const filteredPosts = posts.map(post => {
      if (!post.image) {
        delete post.image;
      }
      return post; 
    });

   
    return filteredPosts.sort((a, b) => b.id - a.id);
  } catch (error) {
    console.error('Error loading blog posts:', error);

    return [];
  }
}

const newsPosts = await loadBlogPosts();
---

<Layout title="Valeqs Minecraft Server" activePage="home">
  <div class="page-container">
    <main>
      <!-- Server Connect Section -->
      <section class="server-connect">
        <!-- Entferne den grünen Punkt vollständig -->
        <h1>{t.server.joinServer}</h1>
        
        <div class="server-ip-container">
          <div class="server-ip">
            <span class="ip-text">{serverInfo.ip}</span>
            <button id="copy-ip" class="copy-button">{t.server.copy}</button>
          </div>
        </div>
        
        <div class="server-stats">
          <div class="stat">
          </div>
        </div>
      </section>

      <!-- News Section -->
      <section class="news-section">
        <h2 class="section-title" style="text-align: center;">{t.news.latestNews}</h2>
        
        <div class="news-container">
          {newsPosts.map(post => (
            <article class="news-post discord-embed">
              <div class="embed-accent"></div>
              <div class="embed-content">
                <div class="embed-header">
                  <time class="embed-timestamp" datetime={post.dateIso ?? new Date(post.date).toISOString()}>
                    {post.date}
                  </time>
                  <h3 class="embed-title">{post.title}</h3>
                </div>
                
                <div class="embed-description">
                  <p set:html={post.content} />
                </div>
                
                {post.image && (
                  <div class="embed-image">
                    <img src={post.image} alt={post.title} loading="lazy" />
                  </div>
                )}
                
                <div class="embed-footer">
                  <div class="embed-author">
                    <div class="author-avatar">
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/></svg>
                    </div>
                    <span>{post.author?.username ?? 'Admin'}</span>
                  </div>
                  
                  <button class="embed-button read-more" aria-expanded="false" data-post-id={post.id}>
                    {t.news.readMore}
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="6 9 12 15 18 9"></polyline></svg>
                  </button>
                </div>
              </div>
            </article>
          ))}
        </div>
      </section>
    </main>

    <!-- Footer -->
    <footer class="site-footer">
      <div class="footer-content">
        <div class="footer-info">
          <span>{t.footer.copyright}</span>
          <span>{t.footer.disclaimer}</span>
        </div>
        
        <div class="footer-links">
          <a href="/terms">{t.footer.terms}</a>
          <a href="/privacy">{t.footer.privacy}</a>
          <a href="/rules">{t.footer.rules}</a>
        </div>
      </div>
    </footer>
  </div>
</Layout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const slides = document.querySelectorAll('.slide');
    let currentSlide = 0;
    
    const userLanguage = window.userLanguage || 'en';
    
    if (!window.userLanguage) {
      window.userLanguage = userLanguage;
    }
    
    async function loadClientTranslations() {
      try {
        const response = await fetch(`/api/translations?lang=${userLanguage}`);
        if (response.ok) {
          return await response.json();
        }
        return null;
      } catch (error) {
        console.error('Failed to load client translations:', error);
        return null;
      }
    }
    
    slides.forEach((slide, index) => {
      if (index !== 0) {
        slide.classList.add('inactive');
      }
    });
    
    function rotateSlides() {
      slides[currentSlide].classList.add('fade-out');
      
      setTimeout(() => {
        slides[currentSlide].classList.add('inactive');
        slides[currentSlide].classList.remove('fade-out');
        
        currentSlide = (currentSlide + 1) % slides.length;
        
        slides[currentSlide].classList.remove('inactive');
        slides[currentSlide].classList.add('fade-in');
        
        setTimeout(() => {
          slides[currentSlide].classList.remove('fade-in');
        }, 1000);
      }, 1000);
    }
    
    setInterval(rotateSlides, 8000);
    
    loadClientTranslations().then(translations => {
      document.getElementById('copy-ip')?.addEventListener('click', () => {
        const ipElement = document.querySelector('.ip-text');
        const serverIp = ipElement?.textContent || '';
        navigator.clipboard.writeText(serverIp)
          .then(() => {
            const button = document.getElementById('copy-ip');
            if (button) {
              const copiedText = translations?.server?.copied || 'Copied!';
              const copyText = translations?.server?.copy || 'Copy';
              
              button.textContent = copiedText;
              setTimeout(() => {
                button.textContent = copyText;
              }, 2000);
            }
          })
          .catch(err => {
            console.error('Could not copy text: ', err);
          });
      });

      const readMoreButtons = document.querySelectorAll('.read-more');
      readMoreButtons.forEach(button => {
        button.addEventListener('click', () => {
          const postElement = button.closest('.news-post');
          const descriptionElement = postElement?.querySelector('.embed-description');
          const isExpanded = button.getAttribute('aria-expanded') === 'true';
          const readMoreText = translations?.news?.readMore || 'Read More';
          const readLessText = translations?.news?.readLess || 'Read Less';
          const arrowDownSVG = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="6 9 12 15 18 9"></polyline></svg>';
          const arrowUpSVG = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="18 15 12 9 6 15"></polyline></svg>';

          if (descriptionElement) {
            if (isExpanded) {
              descriptionElement.classList.remove('expanded');
              button.setAttribute('aria-expanded', 'false');
              button.innerHTML = `${readMoreText} ${arrowDownSVG}`;
            } else {
              descriptionElement.classList.add('expanded');
              button.setAttribute('aria-expanded', 'true');
              button.innerHTML = `${readLessText} ${arrowUpSVG}`;
            }
          }
        });
      });
    });
    
    const newsPosts = document.querySelectorAll('.news-post');
    if (newsPosts.length > 0) {
      const newestPost = newsPosts[0];
      newestPost.classList.add('new-post');
    }
  });
</script>

<style>
  /* Variables - Updated to match ranks.astro */
  :root {
    /* Discord-inspired colors but slightly softer */
    --background: #23272A;
    --bg-secondary: #2C2F33;
    --bg-light: #36393F;
    
    /* Text colors */
    --text-normal: #DCDDDE;
    --text-muted: #8e9297;
    --text-heading: #FFFFFF;
    
    /* Button colors */
    --button-primary: #5865F2; /* Discord blurple */
    --button-primary-hover: #4752c4;
    --button-secondary: #4f545c;
    --button-secondary-hover: #5d6269;
    
    /* Other colors */
    --premium-color: #99AAB5;
    --king-color: #FFA500;
    --error-color: #F04747;
    --status-online: #3ba55c;
    --status-offline: #ed4245;
    
    /* Border radius */
    --radius-sm: 4px;
    --radius-md: 8px;
    --radius-lg: 12px;
    
    /* Transitions */
    --transition-fast: 0.15s ease;
    --transition-normal: 0.25s ease;
  }
  
  /* Reset & Base Styles */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
    background-color: var(--background);
    color: var(--text-normal);
    line-height: 1.5;
  }
  
  /* Background Slideshow */
  .background-slideshow {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
  }
  
  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    transition: opacity 1s ease;
  }
  
  .slide.inactive {
    opacity: 0;
    pointer-events: none;
  }
  
  .slide.fade-in {
    animation: fadeIn 1s forwards;
  }
  
  .slide.fade-out {
    animation: fadeOut 1s forwards;
  }
  
  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at center, rgba(32, 34, 37, 0.85) 0%, rgba(15, 17, 19, 0.95) 100%);
    z-index: -1;
  }
  
  /* Page Container - Matches ranks.astro */
  .page-container {
    width: 100%;
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 1rem;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }
  
  /* Server Connect Section */
  .server-connect {
    text-align: center;
    padding: 2.5rem 0;
  }
  
  .server-connect h1 {
    font-size: 2.5rem;
    color: var(--text-heading);
    margin-bottom: 1.5rem;
    font-weight: 700;
  }
  
  .server-ip-container {
    margin-bottom: 2rem;
  }
  
  .server-ip {
    display: inline-flex;
    align-items: center;
    background-color: var(--bg-secondary);
    border-radius: var(--radius-md);
    padding: 0.75rem 1rem;
    margin-bottom: 0.5rem;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .ip-text {
    font-family: monospace;
    font-size: 1.6rem; /* Increased font size */
    letter-spacing: 1px;
    margin-right: 1rem;
    color: var(--text-heading);
    user-select: all;
  }
  
  .copy-button {
    background-color: var(--button-primary);
    color: white;
    border: none;
    border-radius: var(--radius-sm);
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 600;
    transition: all var(--transition-fast);
  }
  
  .copy-button:hover {
    background-color: var(--button-primary-hover);
    transform: translateY(-2px);
  }
  
  .server-version {
    font-size: 0.9rem;
    color: var (--text-muted);
  }
  
  .server-stats {
    display: flex;
    justify-content: center;
    gap: 2.5rem;
  }
  
  .stat {
    text-align: center;
  }
  
  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var (--text-heading);
  }
  
  .stat-label {
    font-size: 0.9rem;
    color: var(--text-muted);
  }
  
  /* Server Info Section */
  .server-info {
    margin-bottom: 4rem;
  }
  
  .info-card {
    background-color: var(--bg-secondary);
    border-radius: var(--radius-lg);
    padding: 2rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .info-card h2 {
    font-size: 1.75rem;
    color: var(--text-heading);
    margin-bottom: 1.25rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    font-weight: 700;
  }
  
  .info-card p {
    margin-bottom: 1.5rem;
    line-height: 1.6;
    color: var(--text-normal);
    font-size: 1rem;
  }
  
  .info-details {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .info-item {
    display: flex;
    flex-direction: column;
    gap: 0.35rem;
  }
  
  .info-label {
    font-size: 0.9rem;
    color: var(--text-muted);
    font-weight: 500;
  }
  
  .info-value {
    font-size: 1.1rem;
    color: var(--text-heading);
    font-weight: 600;
  }
  
  .discord-invite {
    text-align: center;
    margin-top: 1.5rem;
  }
  
  .discord-button {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    background-color: var(--button-primary);
    color: white;
    text-decoration: none;
    padding: 0.75rem 1.5rem;
    border-radius: var(--radius-md);
    font-weight: 600;
    transition: all var(--transition-fast);
  }
  
  .discord-button:hover {
    background-color: var(--button-primary-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(88, 101, 242, 0.3);
  }
  
  .discord-icon {
    width: 1.25rem;
    height: 1.25rem;
  }
  
  /* News Section - Discord-Embed Style */
  .news-section {
    margin-bottom: 4rem;
  }

  .section-title {
    font-size: 1.75rem;
    margin-bottom: 1.5rem;
    color: var(--text-heading);
    font-weight: 700;
  }

  .news-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  /* Discord Embed Style */
  .discord-embed {
    position: relative;
    display: flex;
    background-color: var(--bg-light);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.5rem;
    transition: transform 0.15s ease;
  }

  .discord-embed:hover {
    transform: translateY(-2px);
  }

  .embed-accent {
    flex: 0 0 4px;
    background-color: var(--button-primary);
  }

  .embed-content {
    flex: 1;
    padding: 0.75rem 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .embed-header {
    margin-bottom: 0.25rem;
  }

  .embed-timestamp {
    display: inline-block;
    font-size: 0.7rem;
    color: var(--text-muted);
    font-weight: 500;
    margin-bottom: 0.25rem;
  }

  .embed-title {
    font-size: 1rem;
    color: var(--text-heading);
    font-weight: 600;
    margin: 0;
    line-height: 1.3;
  }

  .embed-description {
    font-size: 0.9rem;
    line-height: 1.4;
    color: var(--text-normal);
    overflow: hidden;
    max-height: 3.5em; /* ~2.5 lines */
  }

  .embed-description.expanded {
    max-height: none;
  }

  .embed-description a {
    color: var(--button-primary);
    text-decoration: none;
  }

  .embed-description a:hover {
    text-decoration: underline;
  }

  .embed-image {
    margin-top: 0.5rem;
    border-radius: 3px;
    overflow: hidden;
    max-height: 300px;
  }

  .embed-image img {
    width: 100%;
    max-height: 300px;
    object-fit: cover;
  }

  .embed-footer {
    margin-top: 0.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
  }

  .embed-author {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-muted);
  }

  .author-avatar {
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: var(--button-secondary);
    color: var(--text-normal);
    overflow: hidden;
  }

  .author-avatar svg {
    width: 14px;
    height: 14px;
  }

  .embed-button {
    background: none;
    border: none;
    color: var(--button-primary);
    font-weight: 500;
    padding: 0;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.8rem;
    cursor: pointer;
  }

  .embed-button:hover {
    text-decoration: underline;
    color: var(--button-primary-hover);
  }

  .embed-button svg {
    transition: transform 0.2s ease;
  }

  .embed-button[aria-expanded="true"] svg {
    transform: rotate(180deg);
  }

  /* Ändere die Akzentfarbe des neuesten Posts von Orange zu Blau
     (verwende die gleiche Farbe wie für die anderen Posts) */
  .discord-embed:first-child .embed-accent {
    background-color: var(--button-primary); /* Blau statt Orange */
  }

  /* Mobile Anpassungen */
  @media (max-width: 480px) {
    .embed-content {
      padding: 0.5rem 0.75rem;
    }
    
    .embed-image {
      max-height: 200px;
    }
    
    .embed-image img {
      max-height: 200px;
    }
  }
  
  /* Footer */
  .site-footer {
    margin-top: auto;
    padding: 2rem 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .footer-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .footer-info {
    display: flex;
    flex-direction: column;
    color: var(--text-muted);
    font-size: 0.9rem;
    gap: 0.25rem;
  }
  
  .footer-links {
    display: flex;
    gap: 1.5rem;
  }
  
  .footer-links a {
    color: var(--text-muted);
    text-decoration: none;
    transition: color var(--transition-fast);
    font-size: 0.9rem;
  }
  
  .footer-links a:hover {
    color: var(--text-normal);
  }
  
  /* Animations */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .site-header {
      padding: 1rem 0;
      margin-bottom: 1.5rem;
    }
    

    
    .server-connect h1 {
      font-size: 2rem;
    }
    
    .post-header {
      flex-direction: column;
      align-items: flex-start;
    }
  }
  
  @media (max-width: 580px) {
    .server-ip {
      flex-direction: column;
      gap: 0.75rem;
      width: 100%;
    }
    
    .ip-text {
      margin-right: 0;
      margin-bottom: 0;
      font-size: 1.3rem; /* Adjusted size for smaller screens */
    }
    
    .copy-button {
      width: 100%;
    }
    
    .server-stats {
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .info-details {
      grid-template-columns: 1fr;
    }
    
    .footer-content {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.5rem;
    }
    
    .footer-links {
      width: 100%;
      justify-content: space-between;
    }
  }
  .news-post.new-post {
    animation: highlightPost 3s ease-in-out;
  }
  
  @keyframes highlightPost {
    0%, 100% { border-color: rgba(255, 255, 255, 0.05); }
    50% { border-color: var(--button-primary); box-shadow: 0 0 15px rgba(88, 101, 242, 0.5); }
  }
</style>